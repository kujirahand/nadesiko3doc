●『[[失敗時:plugin_promise/失敗時]]』の詳しい解説

非同期処理PROMISEが失敗した時に関数CALLBACKを実行する、という非同期処理を作成します。

関数CALLBACKの実行時、『対象』にPROMISEが失敗した際の理由が代入されます。
また、PROMISEが失敗した際の理由は関数CALLBACKの引数としても渡されます。

作成する非同期処理は、関数CALLBACKの実行が完了すると成功し、その戻り値がデータになります。

▲利用例

『対象』を用いて、理由を受け取ります。

{{{#nako3(rows=11)
●非同期処理サンプル(RESOLVE,REJECT)とは
  1秒待つ。
  REJECT("めんどい")。
ここまで。

処理は{関数}非同期処理サンプルで動く時。

処理が失敗した時には
  「失敗！理由：{対象}」を表示。
ここまで。
}}}

引数を用いて、理由を受け取ります。

{{{#nako3(rows=11)
●非同期処理サンプル(RESOLVE,REJECT)とは
  1秒待つ。
  REJECT("めんどい")。
ここまで。

処理は{関数}非同期処理サンプルで動く時。

処理が失敗した時には(理由)
  「失敗！理由：{理由}」を表示。
ここまで。
}}}

関数の戻り値が、新しい非同期処理の成功時のデータになります。

{{{#nako3(rows=16)
動く時には(RESOLVE,REJECT)
  「処理開始」を表示。
  1秒待つ。
  REJECT("めんどい")。
ここまで。

その失敗した時には
  「失敗！理由：{対象}」を表示。
  1秒待つ。
  「結果」を戻す。
ここまで。

その成功した時には
  「{対象}を受け取りました。」を表示。
ここまで。
}}}

『成功時』『失敗時』『処理時』による関数の実行中にエラーが発生すると、非同期処理の失敗として扱われます。

{{{#nako3(rows=16)
動く時には(RESOLVE,REJECT)
  1秒待つ。
  RESOLVE("成功")。
ここまで。

その成功した時には
  「データ：{対象}」を表示。
  1秒待つ。
  # エラーを発生させる
  「」を配列ソート。
ここまで。

その失敗した時には
  「失敗！理由：{対象}」を表示。
ここまで。
}}}

▲参考
- [[そ:plugin_promise/そ]]
- [[動時:plugin_promise/動時]]
- [[成功時:plugin_promise/成功時]]
- [[処理時:plugin_promise/処理時]]
- [[終了時:plugin_promise/終了時]]
- [[束:plugin_promise/束]]
