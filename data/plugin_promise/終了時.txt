●『[[終了時:plugin_promise/終了時]]』の詳しい解説

非同期処理PROMISEが終了した時に関数CALLBACKを実行する、という非同期処理を作成します。

非同期処理の成否や、成功した場合のデータ、失敗した場合の理由を受け取ることはできません。

関数CALLBACKでエラーが発生しなければ、作成する非同期処理の成否、およびデータまたは失敗の理由は、非同期処理PROMISEと同じになります。

▲利用例

非同期処理の終了時に処理を行います。
作成する非同期処理の成否、およびデータまたは失敗の理由は、もとの非同期処理と同じになります。

{{{#nako3(rows=25)
動く時には(RESOLVE,REJECT)
  「抽選中…」を表示。
  1秒待つ。
  定数の抽選結果は2の乱数。
  「{抽選結果}が出たよ。」を表示。
  もし、抽選結果が0ならば
    RESOLVE("当たり！")。
  違えば
    REJECT("ハズレ…")。
  ここまで。
ここまで。

その終了した時には
  「抽選完了！」を表示。
  1秒待つ。
ここまで。

その処理した時には(成功)
  もし、成功ならば
    「成功！データ：{対象}」を表示。
  違えば
    「失敗！理由：{対象}」を表示。
  ここまで。
ここまで。
}}}

関数の実行中にエラーが発生すると、作成する非同期処理は失敗します。

{{{#nako3(rows=21)
動く時には(RESOLVE,REJECT)
  「処理中…」を表示。
  1秒待つ。
  RESOLVE("結果")。
ここまで。

その終了した時には
  「処理完了！」を表示。
  1秒待つ。
  # エラーを発生させる
  「」を配列ソート。
ここまで。

その処理した時には(成功)
  もし、成功ならば
    「成功！データ：{対象}」を表示。
  違えば
    「失敗！理由：{対象}」を表示。
  ここまで。
ここまで。
}}}

▲参考
- [[そ:plugin_promise/そ]]
- [[動時:plugin_promise/動時]]
- [[成功時:plugin_promise/成功時]]
- [[失敗時:plugin_promise/失敗時]]
- [[処理時:plugin_promise/処理時]]
- [[束:plugin_promise/束]]
