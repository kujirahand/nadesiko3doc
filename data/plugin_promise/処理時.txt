●『[[処理時:plugin_promise/処理時]]』の詳しい解説

非同期処理PROMISEが終了した時に関数CBFUNCを実行する、という非同期処理を作成します。

関数CBFUNCの実行時、非同期処理が成功した場合はデータが、失敗した場合は理由が、『対象』に代入されます。
また、非同期処理の成否とデータまたは理由が関数CBFUNCの引数として渡されます。

作成する非同期処理は、関数CBFUNCの実行が完了すると成功し、その戻り値がデータになります。

▲利用例

『対象』を用いて、データまたは失敗の理由を受け取ります。

{{{#nako3(rows=22)
# 関数Fに引数A(配列で指定)を渡して実行する関数を作成する
●(FにAの)引数記録とは
  「(f,a)=>(()=>f(...a))」を[F,A]でJS関数実行して戻す。
ここまで。

●非同期処理サンプル(RESOLVE,REJECT)とは
  定数の成功処理は、RESOLVEに["成功！"]の引数記録。
  「成功」のボタン作成。
  成功処理でそれをクリックした時。
  定数の失敗処理は、REJECTに["失敗！"]の引数記録。
  「失敗」のボタン作成。
  失敗処理でそれをクリックした時。
  改行作成。
ここまで。

プロミスは{関数}非同期処理サンプルで動く時。

プロミスが処理した時には(成否)
  「成功したか：{成否}」を表示。
  「データまたは失敗の理由：{対象}」を表示。
ここまで。
}}}

引数を用いて、データまたは失敗の理由を受け取ります。

{{{#nako3(rows=22)
# 関数Fに引数A(配列で指定)を渡して実行する関数を作成する
●(FにAの)引数記録とは
  「(f,a)=>(()=>f(...a))」を[F,A]でJS関数実行して戻す。
ここまで。

●非同期処理サンプル(RESOLVE,REJECT)とは
  定数の成功処理は、RESOLVEに["成功！"]の引数記録。
  「成功」のボタン作成。
  成功処理でそれをクリックした時。
  定数の失敗処理は、REJECTに["失敗！"]の引数記録。
  「失敗」のボタン作成。
  失敗処理でそれをクリックした時。
  改行作成。
ここまで。

プロミスは{関数}非同期処理サンプルで動く時。

プロミスが処理した時には(成否,データ)
  「成功したか：{成否}」を表示。
  「データまたは失敗の理由：{データ}」を表示。
ここまで。
}}}

関数の戻り値が、新しい非同期処理の成功時のデータになります。

{{{#nako3(rows=21)
動く時には(RESOLVE,REJECT)
  「抽選中…」を表示。
  1秒待つ。
  もし、(2の乱数)が0ならば
    RESOLVE("当たり！")。
  違えば
    REJECT("ハズレ…")。
  ここまで。
ここまで。

その処理した時には(成否)
  「成功したか：{成否}」を表示。
  「データまたは失敗の理由：{対象}」を表示。
  1秒待つ。
  「結果」を戻す。
ここまで。

その成功した時には
  「{対象}を受け取りました。」を表示。
ここまで。
}}}

▲参考
- [[そ:plugin_promise/そ]]
- [[動時:plugin_promise/動時]]
- [[成功時:plugin_promise/成功時]]
- [[失敗時:plugin_promise/失敗時]]
- [[終了時:plugin_promise/終了時]]
- [[束:plugin_promise/束]]
