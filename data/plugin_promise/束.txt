●『[[束:plugin_promise/束]]』の詳しい解説

1個または複数の非同期処理をまとめた非同期処理を作成します。

もとの非同期処理が全て成功すると、新しい非同期処理も成功し、そのデータはもとの非同期処理のデータを格納した配列になります。
もとの非同期処理のいずれかが失敗すると、新しい非同期処理は失敗し、その理由はもとの非同期処理が失敗した理由になります。

▲利用例

以下のコードでは、「成功1」「成功2」「成功3」のボタンを全て押すと、まとめた非同期処理が成功します。
「失敗」のいずれかのボタンを押すと、まとめた非同期処理が失敗します。

{{{#nako3(rows=36)
# 関数Fに引数A(配列で指定)を渡して実行する関数を作成する
●(FにAの)引数記録とは
  「(f,a)=>(()=>f(...a))」を[F,A]でJS関数実行して戻す。
ここまで。

●(Fの)ボタン処理とは
  定数のテキストは、対象のテキスト取得。
  「{テキスト}を押しました。」を表示。
  F(テキスト)。
ここまで。

ボタン名とは変数。

●非同期処理サンプル(RESOLVE,REJECT)とは
  定数の成功処理は、{関数}ボタン処理に[RESOLVE]の引数記録。
  「成功{ボタン名}」のボタン作成。
  成功処理でそれをクリックした時。
  定数の失敗処理は、{関数}ボタン処理に[REJECT]の引数記録。
  「失敗{ボタン名}」のボタン作成。
  失敗処理でそれをクリックした時。
  改行作成。
ここまで。

ボタン名は1。
処理1は{関数}非同期処理サンプルで動く時。
ボタン名は2。
処理2は{関数}非同期処理サンプルで動く時。
ボタン名は3。
処理3は{関数}非同期処理サンプルで動く時。

処理1と処理2と処理3を束ねる。
その処理した時には（成否)
  「成功したか：{成否}」を表示。
  「データまたは失敗の理由：{対象}」を表示。
ここまで。
}}}

▲参考
- [[そ:plugin_promise/そ]]
- [[動時:plugin_promise/動時]]
- [[成功時:plugin_promise/成功時]]
- [[失敗時:plugin_promise/失敗時]]
- [[処理時:plugin_promise/処理時]]
- [[終了時:plugin_promise/終了時]]
