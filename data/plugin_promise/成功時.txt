●『[[成功時:plugin_promise/成功時]]』の詳しい解説

非同期処理PROMISEが成功した時に関数CALLBACKを実行する、という非同期処理を作成します。

関数CALLBACKの実行時、『対象』にPROMISEが成功した際のデータが代入されます。
また、PROMISEが成功した際のデータは関数CALLBACKの引数としても渡されます。

作成する非同期処理は、関数CALLBACKの実行が完了すると成功し、その戻り値がデータになります。

▲利用例

『対象』を用いて、データを受け取ります。

{{{#nako3(rows=11)
●非同期処理サンプル(RESOLVE,REJECT)とは
  1秒待つ。
  RESOLVE("成功")。
ここまで。

処理は{関数}非同期処理サンプルで動く時。

処理が成功した時には
  「データ：{対象}」を表示。
ここまで。
}}}

引数を用いて、データを受け取ります。

{{{#nako3(rows=11)
●非同期処理サンプル(RESOLVE,REJECT)とは
  1秒待つ。
  RESOLVE("成功")。
ここまで。

処理は{関数}非同期処理サンプルで動く時。

処理が成功した時には(データ)
  「データ：{データ}」を表示。
ここまで。
}}}

関数の戻り値が、新しい非同期処理の成功時のデータになります。

{{{#nako3(rows=16)
動く時には(RESOLVE,REJECT)
  「処理開始」を表示。
  1秒待つ。
  RESOLVE("結果1")。
ここまで。

その成功した時には
  「{対象}を受け取って処理中…」を表示。
  1秒待つ。
  「結果2」を戻す。
ここまで。

その成功した時には
  「{対象}を受け取りました。」を表示。
ここまで。
}}}

▲参考
- [[そ:plugin_promise/そ]]
- [[動時:plugin_promise/動時]]
- [[失敗時:plugin_promise/失敗時]]
- [[処理時:plugin_promise/処理時]]
- [[終了時:plugin_promise/終了時]]
- [[束:plugin_promise/束]]
