●配列変数とは

配列変数を使うと一つの変数の中に複数の値を代入できます。番号を使って値を出し入れします。

●配列変数の使い方

{{{
[書式]
# 初期化
変数名＝[]

# 値を代入
変数名[要素番号] = 値
変数名＠要素番号 = 値

#値を参照
変数名[要素番号]を表示
変数名＠要素番号を表示
}}}

・（メモ1）要素番号は0から始まります。
・（メモ2）角括弧 [ ... ] を、全角角括弧【...】で記述もできます。


●簡単な利用例

以下は配列変数Aを作成し、値を代入したり参照したりする例です。

{{{#nako3
# 初期化
A= []
# 値を代入
A@0 = 30
A@1 = 50
A@2 = 80
# 値を参照
A@2を表示。
}}}

●JSON記法を使って配列を初期化する

JSON記法を使って配列を初期化できます。

{{{#nako3
# JSON記法で初期化
A = [30, 50, 80]

# 内容を参照
A@2を表示。
}}}

●繰り返し文と組み合わせる

以下は配列変数Aを作成し、[[繰り返し文:文法/繰返]]を使って内容を全部画面に表示します。

{{{#nako3
# 初期化
A= [30, 50, 80]

# 値を全部出力
Nを0から2まで繰り返す
　　A@Nを表示
ここまで
}}}

- (参考) [[繰り返し文:文法/繰返]]

●反復文と組み合わせる

また、反復を使うと要素数にかかわらず手軽に処理できます。

{{{#nako3
A=[30,50,80]
Aを反復
　　対象を表示
ここまで。
}}}


- (参考) [[反復構文:文法/反復]]

●二次元配列変数

配列変数の中に配列変数を代入することで二次元配列変数を表現できます。二次元配列変数は表を作成するのに役立ちます。CSV操作と組み合わせることで、事務データの処理などに使えます。

- (参考) [[plugin_csv/CSV操作]]

なお、二次元配列変数の要素にアクセスするには、下記のように記述します。（ただし「変数@A,B」の形式はv3.2.7以降でサポートされます。）

{{{
[書式]
# [ ... ] を使う場合
変数[A][B] = 値。
変数[A][B]を表示。

# @ を使う場合 --- (v3.2.7以降)
変数@A,B = 値。
変数@A,Bを表示。

変数@(A)@B = 値。
変数@(A)@Bを表示。
}}}

以下、利用例です。

{{{#nako3
A= [[0,1,2], [3,4,5], [6,7,8]]
#
A[1][1] = 100
A[1][1]を表示
#
A@2@2=100
A@2@2を表示
}}}

▲二次元配列変数で＠を使う時の注意

ただし「変数@変数@変数」の形式でアクセスすると「変数＠（変数＠変数）」と解釈されるためエラーになります。v3.2.7以降では、インデックスに変数を指定する場合は「変数＠変数,変数」を使うようにしてください。([[参考#976:https://github.com/kujirahand/nadesiko3/issues/976]])


●配列を操作する命令があります

- [[plugin_system/配列操作]]
- [[plugin_system/二次元配列処理]]
- [[plugin_csv/CSV操作]]

●参考

- [[文法]]
- [[文法/辞書型変数]]
- [[文法/繰返]]
- [[文法/反復]]
- [[plugin_system/配列操作]]
- [[plugin_system/二次元配列処理]]
- [[plugin_csv/CSV操作]]


