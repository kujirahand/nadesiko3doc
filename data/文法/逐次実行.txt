■ 逐次実行について（非同期処理）

Webブラウザ上でネットワークを処理したり、ローカルPC上でデータベースにアクセスしたりする場合、非同期処理を記述しなくてはなりません。その場合『逐次実行』構文を利用する必要があります。

特に、なでしこの命令に『``＊＊逐次＊＊``』という名前のものがあれば、それは『逐次実行』命令と組み合わせて使う必要があります。

{{{
[書式] 一番簡単な使い方
逐次実行
　　# ここに逐次処理を記述。
　　# ここに逐次処理を記述。
　　# ここに逐次処理を記述。
ここまで。
}}}

{{{
[書式] エラー処理をしたい場合
逐次実行
　　# ここに逐次処理を記述。
　　# ここに逐次処理を記述。
　　# ここに逐次処理を記述。
エラーならば
　　# ここに逐次実行でエラーが出たときの処理
ここまで。
}}}

あるいは同時に実行したい部分を「先へ...ここまで」のようにブロックを指定して、次の書式で記述します。

{{{
[書式]
逐次実行
　先に
　　# ここに逐次処理を記述。
　　# ここに逐次処理を記述。
　ここまで。
　次に
　　# ここに逐次処理を記述。
　　# ここに逐次処理を記述。
　ここまで。
　次に
　　# ここに逐次処理を記述。
　　# ここに逐次処理を記述。
　ここまで。
エラーならば
　# ここにエラーが起きた時の処理
ここまで。
}}}

●利用例

『逐次実行』構文は以下のように記述できます。『逐次実行』から『ここまで』の間に書いた文を非同期で実行します。以下のプログラムを実行すると一秒ごとに「い」「ろ」「は」と表示します。

{{{#nako3
逐次実行
　「い」と表示。
　1秒逐次待機。
　「ろ」と表示。
　1秒逐次待機。
　「は」と表示。
ここまで。
}}}

・（参考）[[plugin_system/秒逐次待機]] ... 指定秒だけ待機する命令です。


▲『HTTP逐次取得』命令と組み合わせる

AJAX処理にも力を発揮します。

{{{#nako3(rows=8)
郵便番号＝「221-0824」
郵便API＝「https://api.aoikujira.com/zip/zip.php?fmt=json&zn={郵便番号}」
「〒｛郵便番号｝の住所を調べます」と表示。
逐次実行
　郵便APIをHTTP逐次取得。
　対象をJSONデコードして結果に代入。
　結果["result"]を表示。
ここまで。
}}}

・（参考）[[plugin_browser/HTTP逐次取得]]


●（重要）『逐次実行』が実行されるタイミングについて

『逐次実行』構文を使うとプログラムは非同期で実行されます。つまり、普通のプログラム（『逐次実行』から『ここまで』以外）が一通り終了したタイミングで実行されます。

そのため、『逐次実行』構文以降にプログラムを実行したい場合には、『逐次実行』の最後に実行したいプログラムを記述する必要があります。

{{{#nako3(rows=14)
「1:あいうえお」と表示。
逐次実行
　　「2:逐次実行がはじまりました」を表示
　　1秒逐次待機。
　　「3:かきくけこ：1秒逐次待機しました」を表示
　　1秒逐次待機。
　　「4:さしすせそ」と表示。
　　次に
　　　　# ここに最後に実行したいプログラムを記述
　　　　「5:たちつてと」と表示。
　　ここまで
ここまで
「6:なにぬねの」と表示。
}}}

●「逐次実行」の中での繰り返し処理

逐次実行の中で繰り返し構文を書いた時は、その処理が逐次実行されることはありませんので注意が必要です。

●参考

- (参考) [[plugin_browser/HTTP逐次取得]]
- (参考) [[plugin_browser/AJAXとHTTP]]


●(メモ) v3.2.1で変わった『逐次実行』構文

以下で議論され動作が修正されました。

・[[#912:https://github.com/kujirahand/nadesiko3/issues/914]]
・[[#717:https://github.com/kujirahand/nadesiko3/issues/717]]
・「先に」「次に」を書かなくても使えます。
・それでも、「次に」「先に」を書くと、そこから「ここまで」のようにブロックを指定できます。
・エラー時の処理を記述できます。

{{{#nako3
# 逐次実行の例
逐次実行
　「あ」を表示。
　1秒逐次待機
　「い」を表示。
　1秒逐次待機
　「う」を表示。
エラーならば
　　「エラーになりました」と表示
ここまで。
}}}

