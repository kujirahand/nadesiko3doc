■関数について

なでしこでは、多くのシステム関数が使えるほか、独自の関数を定義して利用できます。

関数を定義するには次の書式で記述します。

{{{
[書式1]
●関数名とは
　　# ここに関数定義
ここまで
}}}

{{{#column
【メモ】記号「●」を日本語入力するには、「まる」または「くろまる」と入力して変換します。
}}}

関数に引数宣言が必要な場合、以下のように指定します。

{{{
[書式2]
●（引数）関数名とは
　　# ここに関数定義
ここまで
}}}

以下のように、なでしこv1と互換性のある指定方法も可能です。ただし、読みやすさの観点から今後は上記の書式1か書式2の方法をオススメします。

{{{
[書式3] 
●関数名(引数)
　　# ここに関数定義
ここまで
}}}

なお、なでしこで関数を表す記号「●」を「関数」と置き換えることも可能です。

{{{
[書式4]
関数 (引数)関数名とは
  # ここに関数定義
ここまで
}}}

●関数を呼び出す方法

上記のように定義した関数もなでしこに最初から備わっている関数と同じように呼び出すことができます。

{{{
[書式] 定義した関数を呼び出す方法
(引数1)(助詞)、(引数2)(助詞)、... 関数名。
}}}

なお、なでしこの関数呼び出しでは、引数と一緒に指定した『助詞』の部分が重要で、助詞が合っていれば、引数の順番を入れ替えても正しく動くようになっています。

例えば、引き算を行う「AからBを引く」という関数は以下のように書き換えても正しく動きます。以下のプログラムは両方とも8を表示します。

{{{#nako3(rows=3)
10から2を引いて表示。
2を10から引いて表示。 
}}}

▲関数の戻り値について

そして、関数は戻り値を指定できます。戻り値を指定するには、特殊変数「それ」に値を代入するか、あるいは「(値)を戻す」文で値を指定します。

▲簡単な関数の定義例

以下のプログラムは、足し算を行うだけの「加算処理」という関数を定義する例です。

{{{#nako3(rows=9)
# --- 関数の定義 ---
●(AとBの)加算処理とは
　　それ＝A＋B
ここまで。

# --- 関数の呼び出し ---
3と7の加算処理して表示。
5と9の加算処理して表示。
}}}

関数の戻り値を指定する特殊変数「それ」は関数を呼び出すと自動的に更新される仕組みとなっています。そのため、以下のように暗黙的に関数の戻り値を指定できます。

{{{#nako3(rows=9)
# --- 関数の定義 ---
●(AとBの)加算処理とは
　　AにBを足すこと。
ここまで

# --- 関数の呼び出し ---
3と7の加算処理して表示。
5と9の加算処理して表示。
}}}

▲関数の戻り値を「（値）を戻す」で指定する場合

以下の例のように「（値）を戻す」文を使うこともできます。

{{{#nako3
●(AとBの)加算処理とは
　　A+Bを戻すこと
ここまで。

30と20の加算処理して表示。
}}}

▲「それ」に関する補足

改めて、暗黙的に関数の戻り値を指定する関数の例を見てみましょう。なでしこで関数を実行すると特殊変数「それ」が自動的に更新されます。そのため以下のプログラムには、変数「それ」が一度も出てきませんが、変数「それ」を通じて戻り値がやり取りされています。

{{{#nako3
●(AとBの)加算処理とは
　　AにBを足すこと
ここまで。
30と20の加算処理。
それを表示。
}}}

もう一つ、例を見てみましょう。

{{{#nako3(rows=8)
●空白完全除去処理(Sを)
　　Sの「{タブ}」を「」に置換。
　　「{改行}」を「」に置換。
　　「　」を「」に置換。# 全角スペース
　　「 」を「」に置換。# 半角スペース
ここまで
「　　abc　　」を空白完全除去処理して表示。
}}}

▲ローカル変数の定義

なお、関数内でのみ使えるローカル変数を定義できます。[[文法/ローカル変数]]をご覧ください。


▲再帰処理も記述可能

再帰処理とは、ある関数から、その関数自身を呼び出す処理のことです。以下のプログラムは階乗の計算を、敢えて再帰関数で定義する例です。

{{{#nako3
●(VをAのBで)階乗計算とは
　　もし、Bが0以下ならば、Vを戻す。
　　(V*A)をAの(B-1)で階乗計算して戻す。
ここまで。
1を2の3で階乗計算して表示。
1を2の5で階乗計算して表示。
}}}

▲(補足) JavaScriptのコールバックでイベント引数を得る場合

なでしこネイティブの引数ではなく、JavaScriptのコールバックイベントなどで、イベント引数を取得したい場合、変数「引数」に配列形式で、イベント引数の値が得られます。

{{{#nako3
●(AとBの)加算処理とは
  それ＝引数[0] + 引数[1]
ここまで
3と5の加算処理を表示。
}}}

▲(補足) JavaScriptの関数オブジェクトを取得する場合

v3.6.0以上では、JavaScriptの関数オブジェクトを取得する「JSオブジェクト取得」命令を「{関数}」と置き換えることができます。

{{{#nako3
●AAAとは
　　30を戻す。
ここまで
{関数}AAAを実行して表示。
}}}

・[[plugin_system/JSオブジェクト取得]]
・[[文法/無名関数]]


▲参考

・[[文法]]
・[[文法/ローカル変数]]
・[[文法/無名関数]]



