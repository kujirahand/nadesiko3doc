■関数について

独自の関数を定義することができます。次の書式で定義します。

{{{
[書式1] 一般的な指定方法
●（引数）関数名とは
  # ここに関数定義
ここまで
---------------
[書式2] 記号ではなく文字で指定
関数 (引数)関数名とは
  # ここに関数定義
ここまで
---------------
[書式3] なでしこv1と似た方法
●関数名(引数)とは
  # ここに関数定義
ここまで
}}}

以下は「加算処理」という関数を定義する例です。

{{{#nako3
# --- 関数の定義 ---
●(AとBの)加算処理とは
　　（A+B）を戻す
ここまで
# --- 関数の呼び出し ---
30と7の加算処理して表示。
}}}

「戻す」や「戻る」と書いた部分で、関数の実行を抜けて、元の場所に戻ります。そのとき、関数の戻り値を返すときは「(値)を戻す」と記述します。

▲関数の戻り値に変数「それ」を利用する

もしも「戻す」文で、値を省略した場合には、変数「それ」が関数の戻り値となります。

{{{#nako3
●(AとBの)加算処理とは
　　それはA+B
　　戻る
ここまで。
30と20の加算処理して表示。
}}}

また、「戻す」文を書かないときは、変数「それ」が関数の戻り値となります。

{{{#nako3
●(AとBの)加算処理
　　それはA+B
ここまで。
30と20の加算処理して表示。
}}}

関数を実行すると、変数「それ」は自動的に更新されます。以下のプログラムには、変数「それ」が一度も出てきませんが、変数「それ」を通じて、値がやり取りされています。

{{{#nako3
●(AとBの)加算処理
　　AにBを足す
ここまで。
30と20の加算処理。それを表示。
}}}

もう一つ、例を見てみましょう。

{{{#nako3(rows=8)
●空白完全除去処理(Sを)
　　Sの「{タブ}」を「」に置換。
　　「{改行}」を「」に置換。
　　「　」を「」に置換。# 全角スペース
　　「 」を「」に置換。# 半角スペース
ここまで
「　　abc　　」を空白完全除去処理して表示。
}}}


▲再帰処理も記述可能

再帰処理とは、ある関数から、その関数自身を呼び出す処理のことです。以下のプログラムは階乗の計算を、敢えて再帰関数で定義する例です。

{{{#nako3
●(VをAのBで)階乗計算とは
　　もし、Bが0以下ならば、Vを戻す。
　　(V*A)をAの(B-1)で階乗計算して戻す。
ここまで。
1を2の3で階乗計算して表示。
1を2の5で階乗計算して表示。
}}}

▲JavaScriptのコールバックでイベント引数を得る場合

なでしこネイティブの引数ではなく、JavaScriptのコールバックイベントなどで、イベント引数を取得したい場合、変数「引数」に配列形式で、イベント引数の値が得られます。

{{{#nako3
●(AとBの)加算処理とは
  それ＝引数[0] + 引数[1]
ここまで
3と5の加算処理を表示。
}}}


▲参考

・[[文法]]
・[[文法/無名関数]]



