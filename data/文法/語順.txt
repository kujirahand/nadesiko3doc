●なでしこのプログラムの語順について

英語圏で生まれたプログラミング言語は「関数(引数1, 引数2, 引数3)」のように「動詞＋補語」の形をしています。しかし、日本語では「補語＋動詞」の形が一般的です。

そこで、なでしこでは「引数1、引数2、引数3、関数」のような形式でプログラムを記述できます。ただし、日本語にも倒置法があり、動詞から始めたい場合もあります。そこで、関数の直後にカッコを記述した場合には、「関数(引数1, 引数2, 引数3)」と記述できるようにしています。

{{{#nako3
#以下の2文は同じ意味
「こんにちは」と表示。
表示("こんにちは")
}}}

●「なでしこ風関数呼び出し」と「C言語風呼び出し」について

なでしこでは、日本語の語順で書く記法を、「なでしこ風関数呼び出し」と呼び、『関数(引数1, 引数2, …)』の形式で呼び出しを行う記法を「C言語風呼び出し」と呼びます。

{{{#nako3
# -- なでしこ風関数呼び出し ---
「こんにちは」と表示。

# --- C言語風関数呼び出し ---
表示("こんにちは")
}}}

上記を見ると分かるように、C言語風関数呼び出しでは、``助詞を省略する``必要があります。

▲C言語風関数呼び出しの例

なでしこ風関数呼び出しを使うと、冗長になって計算式が読みにくくなる場合もあります。特に、文字列を整数に変換するINT()や数値を切り捨てるFLOOR()、絶対値を求めるABS()など、数学関数を使う場合にC言語風呼び出しを記述すると良いでしょう。

{{{#nako3
# 関数『CEIL(v)』の利用例
人数は3
一人分＝CEIL(1000÷人数)
一人分を表示。
}}}

- (参考) [[plugin_system/CEIL]] --- 実数の小数点以下を切り上げる

●なでしこ風関数呼び出しでは引数の語順を入れ替えが可能

なでしこ風関数呼び出しでは、引数の語順を入れ替えてもプログラムが正しく動くよう設計されています。

{{{#nako3(rows=8)
S=「●が多いと失敗を避けられない」

# 『SのAからBへ置換』という命令
Sの「●」から「言葉」へ置換して表示。

# 助詞があれば語順を変えても大丈夫
Sの「言葉」へ「●」から置換して表示
}}}

- (参考) [[plugin_system/置換]] --- 文字列の置換を行う命令

●C言語風関数呼び出しの制限について

C言語風関数呼び出しでは、いくつかの制限があります。

▲ C言語風呼び出しでは助詞の省略がオススメ

単純な例では、C言語風の関数呼び出しでは助詞を指定することも可能ですが、助詞による語順は無視されます。

{{{#nako3(rows=8)
# C言語風呼び出しで助詞を指定することがトラブルの原因となる例
1を2で割ったものを表示 # 基本形
2で1を割ったものを表示 # 助詞で語順を入れ替えた形
割(1,2)を表示 # C言語風呼び出し
割(1を2で)を表示 # 助詞を指定しても大丈夫
割(2で1を)を表示 # しかし順番は無視される
割(1へ2に)を表示 # エラーにならず計算される
}}}

▲安易にC言語風関数呼び出しを使わない方が良い場合

安易にC言語風関数の呼び出しを使うと、プログラムが読みづらくなる場合があります。と言うのも、なでしこ風の呼び出しでは、助詞が命令の順番を説明するので、引数の順番が分かりやすいのですが、C言語風関数呼び出しでは、引数の順番が分かりづらいです。

{{{#nako3
# なでしこ風
1に2を足して3を掛けて表示。
# C言語風
表示(掛ける(足す(1, 2), 3))
}}}

例えば『置換』命令は、『SのAをBに置換』と使うのですが、日本語で見れば、どれが元の文字列で、何を何に置換するのかが明確です。しかし、C言語風呼び出しでは、引数をどの順番で渡すのか分かりづらいのです。

{{{#nako3
# なでしこ風
「Aは最高の治療薬」の「A」を「喜び」に置換して表示。
# C言語風
表示(置換("Aは最高の治療薬", "A", "喜び"))
}}}

- (参考) [[plugin_system/置換]] --- 置換命令

●参考

- [[文法]]
- [[文法/関数]]






