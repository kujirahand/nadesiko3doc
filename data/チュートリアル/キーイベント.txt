■キー入力イベントを受け取る方法

キーボードの入力に対応するプログラムを作るには、キーイベントを設定します。キーが入力されたタイミングで何か処理を行うには、以下のような関数を利用します。


{{{#csv
関数名, 説明
キー押した時,キーを押した時に実行するイベント
キー離した時,キーを離した時に実行するイベント
キータイピングした時,キーをタイプした時に実行するイベント
}}}

そして、変数「押されたキー」に押したキーの名前が代入されます。なお、キー入力イベントを取得できるのは、キーの入力ができるテキストボックスなどの部品、あるいは、ブラウザのページ全体を表す変数「DOCUMENT」です。

▲簡単な利用例

以下は、エディタにフォーカスを合わせて、何かキーを押すと、押されたキーを表示する例です。

{{{#nako3(rows=10)
# --- UIを作成 ---
「ここにカーソルを合わせてキーを押してね」のエディタ作成してテストエディタに代入。
改行作成。
「ここに結果が表示されるよ」のラベル作成して結果ラベルに代入。
# --- キー押した時のイベント ---
テストエディタをキー押した時には
  K=押されたキー
  結果ラベルへKをテキスト設定。
ここまで
}}}

▲簡単な利用例

ここでは、ページ全体のキー入力を得て、画面に押されたキーを表示するプログラムを作ってみましょう。プログラムを実行したら、適当なキーを押してみましょう。

{{{#nako3(rows=4)
「キーを押してみてください」と表示。
DOCUMENTのキー押した時には
　　「キー押した時: {押されたキー}」を表示。
ここまで。
}}}

▲キーイベント発生のタイミングについて

キー入力に関するイベントには3つのイベントがありますが、どのような順番で発生するのかも確認してみましょう。例えば、[a]というキーを押した時の様子は以下のようになります。

- [a]キーを押した場合
-- 「キー押した時」が発生
-- 「キータイピングした時」が発生
- [a]キーから手を離した場合
-- 「キー離した時」が発生

▲「キー押した時」と「キータイピングした時」の違いは？

それでは、「キー押した時」と「キータイピングした時」はどう違うのかでしょうか。最も大きな違いは、「キー押した時」と「キー離した時」ではShiftキーなどの修飾キーを押した時や、カーソルキーを押した時にもイベントが発生します。

しかし、「キータイピングした時」ではShiftキーやカーソルキーなどのキーは取得できません。その代わり、[Shift]キーと[a]キーを同時に押した時には、大文字の[A]が変数「押されたキー」に代入されます。

▲キーイベントを無効にするには？

ユーザーのキー入力を無効にする場合には、[[DOMイベント処理停止:plugin_browser/DOMイベント処理停止]]を使います。

以下の例では、エディタを二つ作ります。1つ目はDOMイベント処理停止を呼ばず、2つ目は呼びます。2つ目のエディタでは文字が入力されません。

{{{#nako3
A=「イベントをそのまま」のエディタ作成。
Aのキー押時には
　　＃何もしない
ここまで。

B=「イベントをキャンセル」のエディタ作成。
Bのキー押時には
    対象イベントのDOMイベント処理停止。
ここまで。
}}}



▲参照

- [[チュートリアル/マウスイベント]]
- [[plugin_browser/DOM操作とイベント]]


